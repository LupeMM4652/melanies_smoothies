Create Schema Public;
USE Public:


DROP TABLE IF EXISTS FRUIT_OPTIONS;



CREATE TABLE FRUIT_OPTIONS (
  FRUIT_ID int NOT NULL, 
  FRUIT_NAME varchar(25) DEFAULT NULL 
);
create file format smoothies.public.two_headerrow_pct_delim
   type = CSV,
   skip_header = 2,   
   field_delimiter = '%',
   trim_space = TRUE
;

select $1, $2 
from @smoothies.public.my_uploaded_files/fruits_available_for_smoothies.txt
(file_format => smoothies.public.two_headerrow_pct_delim);

COPY INTO smoothies.public.fruit_options
from @smoothies.public.my_uploaded_files
files = ('fruits_available_for_smoothies.txt')
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement
validation_mode = return_errors
purge = true;

COPY INTO smoothies.public.fruit_options
from (select $2 as FRUIT_ID, $1 as FRUIT_NAME
from @smoothies.public.my_uploaded_files/fruits_available_for_smoothies.txt )
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement
purge = true;

create table SMOOTHIES.PUBLIC.ORDERS
(
ingredients varchar (200)
);

insert into smoothies.public.orders(ingredients)
values ('Cantaloupe Guava Jackfruit Elderberries Figs');
select * from smoothies.public.orders; 

truncate table smoothies.public.orders;

alter table SMOOTHIES.PUBLIC.ORDERS add column name_on_order varchar (100);

insert into smoothies.public.orders(ingredients, name_on_order) values('Cantaloupe Guava Jackfruit Elderberries Figs', 'MellyMel');

select * from smoothies.public.orders
where name_on_order is not null;

alter table ORDERS
ADD column ORDER_FILLED BOOLEAN DEFAULT FALSE;

ALTER Table ORDERS
DROP COLUMN ORDER_FILLED ;


update smoothies.public.orders
       set ORDER_FILLED = true
       where name_on_order is null;
       
my_dataframe = session.table("smoothies.public.orders").filter(col("ORDER_FILLED")==0).collect()

create or replace table smoothies.public.orders (
       order_uid integer default smoothies.public.order_seq.nextval,
       order_filled boolean default false,
       name_on_order varchar(100),
       ingredients varchar(200),
       constraint order_uid unique (order_uid),
       order_ts timestamp_ltz default current_timestamp()
);

truncate table SMOOTHIES.PUBLIC.ORDERS;

select * from SMOOTHIES.PUBLIC.ORDERS;

alter table SMOOTHIES.PUBLIC.ORDERS 
add column order_uid integer --adds the column
default smoothies.public.order_seq.nextval--sets the value of the column to sequence
constraint order_uid unique enforced; --makes sure there is always a unique value in the column

set mystery_bag = 'What is in here?';

select $mystery_bag;

set var1 = 2;
set var2 = 5;
set var3 = 7;

select $var1+$var2+$var3;


USE DATABASE UTIL_DB;
select sum_mystery_bag_vars ($var1, $var2 , $var3)
returns number as 'select var1+var2+var3';

 select sum_mystery_bag_vars (12,36,204);

 set eeny = 4; 
 set meeny = 67.2;
 set miney_mo = -39;

 select sum_mystery_bag_vars ($eeny, $meeny,$miney_mo);

